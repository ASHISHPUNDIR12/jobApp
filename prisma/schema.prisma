generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

enum UserRole {
  CANDIDATE
  RECRUITER
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  image         String?
  emailVerified DateTime?
  role          UserRole      @default(CANDIDATE)
  jobPosted     Job[]         @relation("JobsPostedByUser")
  applications  Application[]
  accounts      Account[]
  sessions      Session[]
  company       Company[]
  
}

model Job {
  id           String        @id @default(cuid())
  title        String
  description  String
  image        String?
  companyId    String
  companyName  String?
  company      Company       @relation(fields: [companyId], references: [id])
  location     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  postedById   String
  postedBy     User          @relation("JobsPostedByUser", fields: [postedById], references: [id])
  applications Application[]
  
}


model Application {
  id        String    @id @default(ulid())
  yoe       Int
  skills    String[]
  education Education @default(INTERMEDIATE)
  appliedAt DateTime  @default(now())
  resumeUrl String

  status Status @default(APPLIED)
  userId String
  jobId  String
  user   User   @relation(fields: [userId], references: [id])
  job    Job    @relation(fields: [jobId], references: [id])

  @@unique([userId, jobId])
}

enum Status {
  REJECTED
  INTERVIEWING
  SELECTED
  APPLIED
}

model Company {
  id            String  @id @default(cuid())
  name          String
  imageLocalUrl String
  recruiterId   String?
  recruiter     User?   @relation(fields: [recruiterId], references: [id])
  job           Job[]
}

enum Education {
  INTERMEDIATE
  GRADUATE
  POSTGRADUATE
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
