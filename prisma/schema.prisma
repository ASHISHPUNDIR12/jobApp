// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CANDIDATE
  RECRUITER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String? @unique
  image         String?
  emailVerified DateTime?
  role          UserRole  @default(CANDIDATE)
  jobPosted     Job[]   @relation("JobsPostedByUser")
  applications Application[]
  accounts      Account[]
  sessions      Session[]
}

model Job {
  id          String   @id @default(cuid())
  title       String
  description String
  image String? @default("/companies/default.webp") 
  company     String
  location    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  postedById  String
  postedBy    User     @relation( "JobsPostedByUser", fields: [postedById], references: [id])
  applications Application[]
}

model Application {
  id String @id @default(ulid())
   yoe Int 
   skills String[] 
   education Education @default(INTERMEDIATE)
   appliedAt DateTime @default(now())
   resumeUrl String 
   userId String 
   jobId String  
   user User @relation(fields: [userId],references: [id])
   job Job @relation(fields: [jobId],references: [id])
   @@unique([userId , jobId])
}
enum Education {
  
  INTERMEDIATE
  GRADUATE 
  POSTGRADUATE
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

